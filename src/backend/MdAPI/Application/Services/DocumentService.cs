using Application.Interfaces;
using Application.Models;
using Domain.Entities;

namespace Application.Services;

public class DocumentService
{
    private readonly IDocumentRepository _documentRepository;
    private readonly IFileStorageRepository _fileStorageRepository;
    private readonly IUserRepository _userRepository;

    public DocumentService(IDocumentRepository documentRepository, IFileStorageRepository fileStorageRepository, IUserRepository userRepository)
    {
        _documentRepository = documentRepository;
        _fileStorageRepository = fileStorageRepository;
        _userRepository = userRepository;
    }

    public async Task<(bool Success, string Message, string Content, string Role)> GetDocumentAsync(Guid documentId,
        Guid userId)
    {
        var document = await _documentRepository.GetByIdAsync(documentId);
        if (document == null)
        {
            return (false, "Document not found.", "", "none");
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = –≤–ª–∞–¥–µ–ª–µ—Ü, –æ–Ω "owner"
        if (document.OwnerId == userId)
        {
            var content = await _fileStorageRepository.DownloadFileAsync(document.S3Path);
            return (true, "Owner access granted.", content, "owner");
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ `DocumentCollaborators`
        var collaboratorRole = await _documentRepository.GetUserRoleAsync(documentId, userId);
        if (collaboratorRole != null)
        {
            var content = await _fileStorageRepository.DownloadFileAsync(document.S3Path);
            return (true, "Collaborator access granted.", content, collaboratorRole);
        }
        
        // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø—É–±–ª–∏—á–Ω—ã–π, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä (—Ä–æ–ª—å `viewer`)
        if (!document.IsPrivate)
        {
            var content = await _fileStorageRepository.DownloadFileAsync(document.S3Path);
            return (true, "Public document.", content, "viewer");
        }

        return (false, "Access denied.", "", "none"); // ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω
    }
    
    public async Task<(bool Success, DocumentSettingsResponse? Settings, string Message)> GetDocumentSettingsAsync(Guid documentId, Guid userId)
    {
        var document = await _documentRepository.GetByIdAsync(documentId);
        if (document == null)
        {
            return (false, null, "Document not found.");
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var userRole = document.OwnerId == userId 
            ? "owner" 
            : await _documentRepository.GetUserRoleAsync(documentId, userId);

        if (userRole != "owner" && userRole != "editor")
        {
            return (false, null, "Access denied.");
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–æ–≤, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var collaborators = await _documentRepository.GetCollaboratorsAsync(documentId);
        var filteredCollaborators = collaborators
            .Where(c => c.UserId != userId) // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            .Select(c => new CollaboratorDto
            {
                Id = c.UserId,
                Username = c.User.Username,
                Role = c.Role
            })
            .ToList();

        var response = new DocumentSettingsResponse
        {
            Title = document.Title,
            IsPrivate = document.IsPrivate,
            Collaborators = filteredCollaborators,
            RequesterRole = userRole // üî• –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        };

        return (true, response, "Settings fetched successfully.");
    }
    
    public async Task<string> GetUserRoleAsync(Guid documentId, Guid userId)
    {
        var document = await _documentRepository.GetByIdAsync(documentId);
        if (document == null)
        {
            return "none"; // –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        }

        if (document.OwnerId == userId)
        {
            return "owner"; // –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–∫—É–º–µ–Ω—Ç–∞
        }

        var collaborator = await _documentRepository.GetCollaboratorAsync(documentId, userId);
        return collaborator?.Role ?? "none"; // ‚úÖ –ï—Å–ª–∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä ‚Äî –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ —Ä–æ–ª—å, –∏–Ω–∞—á–µ "none"
    }
    
    
    public async Task<(bool Success, object? NewCollaborator, string Message)> AddCollaboratorAsync(Guid documentId, Guid ownerId, string username, string role)
    {
        var document = await _documentRepository.GetByIdAsync(documentId);
        if (document == null)
        {
            return (false, null, "Document not found.");
        }

        // –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –¥–æ–∫—É–º–µ–Ω—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–æ–≤
        if (document.OwnerId != ownerId)
        {
            return (false, null, "Access denied.");
        }

        var user = await _userRepository.GetByUsernameAsync(username);
        if (user == null)
        {
            return (false, null, "User not found.");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–æ–º
        var existingCollaborator = await _documentRepository.GetCollaboratorAsync(documentId, user.Id);
        if (existingCollaborator != null)
        {
            return (false, null, "User is already a collaborator.");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∞
        await _documentRepository.AddCollaboratorAsync(documentId, user.Id, role);

        var newCollaborator = new
        {
            Id = user.Id,
            Username = user.Username,
            Role = role
        };

        return (true, newCollaborator, "Collaborator added successfully.");
    }
    
    public async Task<List<DocumentWithRole>> GetUserDocumentsAsync(Guid userId)
    {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = `editor` –∏–ª–∏ `viewer`
        var collaboratedDocs = await _documentRepository.GetCollaboratorDocumentsAsync(userId);

        return collaboratedDocs;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    public async Task<(bool Success, string Message, Guid? DocumentId)> CreateDocumentAsync(Guid userId, string title,
        string content, bool isPrivate)
    {
        if (string.IsNullOrWhiteSpace(title))
        {
            return (false, "Title cannot be empty.", null);
        }

        string s3Path = await _fileStorageRepository.UploadFileAsync(userId, content);

        var document = new Document(title, userId, s3Path, isPrivate);
        await _documentRepository.AddAsync(document);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ `DocumentCollaborators` —Å —Ä–æ–ª—å—é `owner`
        await _documentRepository.AddCollaboratorAsync(document.Id, userId, "owner");

        return (true, "Document created successfully.", document.Id);
    }
    
    public async Task<(bool Success, string Message, string Content)> DownloadDocumentAsync(Guid documentId, Guid userId)
    {
        var document = await _documentRepository.GetByIdAsync(documentId);
        if (document == null)
        {
            return (false, "Document not found.", "");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        var hasAccess = document.OwnerId == userId || await _documentRepository.IsCollaboratorAsync(documentId, userId);
        if (!hasAccess)
        {
            return (false, "Access denied.", "");
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ MinIO
        var content = await _fileStorageRepository.DownloadFileAsync(document.S3Path);
        return (true, "Success", content);
    }
    
    public async Task<(bool Success, string Message)> UpdateDocumentSettingsAsync(Guid documentId, Guid userId, UpdateDocumentSettingsRequest request)
    {
        var document = await _documentRepository.GetByIdAsync(documentId);
        if (document == null)
        {
            return (false, "Document not found.");
        }

        // –¢–æ–ª—å–∫–æ `owner` –∏ `editor` –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        var userRole = document.OwnerId == userId 
            ? "owner" 
            : await _documentRepository.GetUserRoleAsync(documentId, userId);

        if (userRole != "owner" && userRole != "editor")
        {
            return (false, "Access denied.");
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ `owner`)
        if (userRole == "owner")
        {
            document.UpdateTitle(request.Title);
            document.SetPrivacy(request.IsPrivate);
        }

        document.UpdateLastEdited();
        await _documentRepository.UpdateAsync(document);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–æ–≤ (–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –Ω–∏–∂–µ –ø–æ —É—Ä–æ–≤–Ω—é)
        foreach (var collab in request.Collaborators)
        {
            var existingCollab = await _documentRepository.GetCollaboratorAsync(documentId, collab.Id);
            if (existingCollab != null)
            {
                // –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–≤—ã—à–∞—Ç—å –¥–æ `owner`
                if (collab.Role == "owner")
                {
                    return (false, "Cannot promote collaborators to owner.");
                }

                // –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª—å –ª—é–¥–µ–π –≤—ã—à–µ —Ç–µ–±—è
                var targetRole = existingCollab.Role;
                if (userRole == "editor" && targetRole == "editor")
                {
                    return (false, "Editors cannot change roles of other editors.");
                }

                existingCollab.UpdateRole(collab.Role);
                await _documentRepository.UpdateCollaboratorAsync(existingCollab);
            }
        }

        return (true, "Document settings updated successfully.");
    }
    
    public async Task<(bool Success, string Message)> UpdateDocumentAsync(Guid documentId, Guid userId, string content)
    {
        var document = await _documentRepository.GetByIdAsync(documentId);
        if (document == null)
        {
            return (false, "Document not found.");
        }

        if (document.OwnerId != userId && !await _documentRepository.IsCollaboratorAsync(documentId, userId))
        {
            return (false, "Access denied.");
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ MinIO
        string newS3Path = await _fileStorageRepository.UploadFileAsync(userId, content);
        document.UpdateS3Path(newS3Path);

        // –û–±–Ω–æ–≤–ª—è–µ–º `LastEdited`
        document.UpdateLastEdited();

        await _documentRepository.UpdateAsync(document);
    
        return (true, "Document updated successfully.");
    }
    
    public async Task<(bool Success, string Message)> DeleteDocumentAsync(Guid documentId, Guid userId)
    {
        var document = await _documentRepository.GetByIdAsync(documentId);
        if (document == null)
        {
            return (false, "Document not found.");
        }

        // –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü (`owner`) –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
        if (document.OwnerId != userId)
        {
            return (false, "Access denied.");
        }

        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ MinIO
        await _fileStorageRepository.DeleteFileAsync(document.S3Path);

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–æ–≤
        await _documentRepository.RemoveCollaboratorsAsync(documentId);

        // –£–¥–∞–ª—è–µ–º —Å–∞–º –¥–æ–∫—É–º–µ–Ω—Ç
        await _documentRepository.DeleteAsync(documentId);

        return (true, "Document deleted successfully.");
    }
    
    public async Task<(bool Success, string Message)> RemoveCollaboratorAsync(Guid documentId, Guid ownerId, Guid userId)
    {
        var document = await _documentRepository.GetByIdAsync(documentId);
        if (document == null)
        {
            return (false, "Document not found.");
        }

        // –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–æ–≤
        if (document.OwnerId != ownerId)
        {
            return (false, "Access denied.");
        }

        var collaborator = await _documentRepository.GetCollaboratorAsync(documentId, userId);
        if (collaborator == null)
        {
            return (false, "Collaborator not found.");
        }

        // –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∞
        await _documentRepository.RemoveCollaboratorAsync(collaborator);

        return (true, "Collaborator removed successfully.");
    }
}